name: Build FFmpeg (Monthly) and Release

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 1 * *'   # 00:00 UTC on the 1st of every month
  workflow_dispatch:
    inputs:
      ffmpeg_ref:
        description: 'FFmpeg ref (tag like n7.1, branch, or commit SHA). Leave empty for latest stable tag.'
        required: false
        default: ''

permissions:
  contents: write  # needed to create releases

jobs:
  resolve_ref:
    name: Resolve FFmpeg ref
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ steps.resolve.outputs.ref }}
      tag: ${{ steps.resolve.outputs.tag }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Compute date stamp
        id: date
        run: echo "date=$(date -u +'%Y%m')" >> "$GITHUB_OUTPUT"

      - name: Resolve ref (latest stable tag if empty)
        id: resolve
        env:
          INPUT_REF: ${{ github.event.inputs.ffmpeg_ref }}
        run: |
          if [ -n "$INPUT_REF" ]; then
            echo "Using provided ref: $INPUT_REF"
            echo "ref=$INPUT_REF" >> "$GITHUB_OUTPUT"
            # If it's a tag starting with n, also set tag; else leave empty
            if echo "$INPUT_REF" | grep -Eq '^n[0-9]+(\.[0-9]+)*$'; then
              echo "tag=$INPUT_REF" >> "$GITHUB_OUTPUT"
            else
              echo "tag=" >> "$GITHUB_OUTPUT"
            fi
            exit 0
          fi

          echo "Fetching tags from FFmpeg..."
          # Get tags, pick the highest nX[.Y] style tag
          TAG=$(curl -fsSL "https://api.github.com/repos/FFmpeg/FFmpeg/tags?per_page=100" \
            | jq -r '.[].name' \
            | grep -E '^n[0-9]+(\.[0-9]+)*$' \
            | sort -Vr \
            | head -n1)

          if [ -z "$TAG" ]; then
            echo "Failed to resolve latest FFmpeg tag" >&2
            exit 1
          fi

          echo "ref=$TAG" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

  build:
    name: Build (${{ matrix.os }})
    needs: resolve_ref
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      FFMPEG_REF: ${{ needs.resolve_ref.outputs.ref }}
      FFMPEG_TAG: ${{ needs.resolve_ref.outputs.tag }}
      DATE_STAMP: ${{ needs.resolve_ref.outputs.date }}

    steps:
      - name: Checkout repo (for README/workflow context)
        uses: actions/checkout@v4

      - name: Print ref
        shell: bash
        run: |
          echo "FFMPEG_REF=$FFMPEG_REF"
          echo "FFMPEG_TAG=$FFMPEG_TAG"
          echo "DATE_STAMP=$DATE_STAMP"

      # ---------- Linux ----------
      - name: Install deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential yasm nasm git pkg-config curl zip jq musl-tools file

      - name: Build FFmpeg (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euxo pipefail
          git clone https://github.com/FFmpeg/FFmpeg.git
          cd FFmpeg
          git checkout "$FFMPEG_REF"
          # Build fully static using musl
          export CC=musl-gcc
          ./configure \
            --prefix="$PWD/install" \
            --disable-debug \
            --disable-doc \
            --enable-static \
            --disable-shared \
            --extra-ldflags="-static"
          make -j"$(nproc)"
          make install

          mkdir -p package
          # Copy binaries only
          cp -v install/bin/ffmpeg install/bin/ffprobe package/

      # ---------- macOS ----------
      - name: Install deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install yasm nasm jq

      - name: Build FFmpeg (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euxo pipefail
          git clone https://github.com/FFmpeg/FFmpeg.git
          cd FFmpeg
          git checkout "$FFMPEG_REF"
          ./configure \
            --prefix="$PWD/install" \
            --disable-debug \
            --disable-doc \
            --enable-static \
            --disable-shared
          make -j"$(sysctl -n hw.logicalcpu)"
          make install

          mkdir -p package
          # Copy binaries only
          cp -v install/bin/ffmpeg install/bin/ffprobe package/

      # ---------- Windows (MSYS2) ----------
      - name: Setup MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            git
            zip
            nasm
            yasm
            mingw-w64-x86_64-toolchain

      - name: Build FFmpeg (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          set -euxo pipefail
          git clone https://github.com/FFmpeg/FFmpeg.git
          cd FFmpeg
          git checkout "$FFMPEG_REF"
          ./configure \
            --prefix="$PWD/install" \
            --target-os=mingw32 \
            --arch=x86_64 \
            --disable-debug \
            --disable-doc \
            --enable-static \
            --disable-shared \
            --pkg-config-flags="--static" \
            --extra-ldflags="-static -static-libgcc -static-libstdc++"
          make -j"$(nproc)"
          make install

          mkdir -p package
          # Copy binaries only
          cp -v install/bin/ffmpeg.exe install/bin/ffprobe.exe package/

      # Upload artifact (Linux)
      - name: Upload artifact (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ env.FFMPEG_TAG != '' && env.FFMPEG_TAG || env.FFMPEG_REF }}-Linux
          path: |
            FFmpeg/package/ffmpeg
            FFmpeg/package/ffprobe
          if-no-files-found: error

      # Upload artifact (macOS)
      - name: Upload artifact (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ env.FFMPEG_TAG != '' && env.FFMPEG_TAG || env.FFMPEG_REF }}-macOS
          path: |
            FFmpeg/package/ffmpeg
            FFmpeg/package/ffprobe
          if-no-files-found: error

      # Upload artifact (Windows)
      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ env.FFMPEG_TAG != '' && env.FFMPEG_TAG || env.FFMPEG_REF }}-Windows
          path: |
            FFmpeg/package/ffmpeg.exe
            FFmpeg/package/ffprobe.exe
          if-no-files-found: error

  release:
    name: Publish Release
    needs: [resolve_ref, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List artifacts
        run: |
          ls -la ./artifacts
          find ./artifacts -type f -maxdepth 2 -print

      - name: Prepare release files (rename per-OS)
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p release
          for d in artifacts/*; do
            [ -d "$d" ] || continue
            os=""
            case "$(basename "$d")" in
              *Linux*) os="linux" ;;
              *Windows*) os="windows" ;;
              *macOS*) os="macos" ;;
              *) os="" ;;
            esac
            [ -n "$os" ] || continue
            # Copy binaries only
            if [ -f "$d/ffmpeg.exe" ]; then
              cp -f "$d/ffmpeg.exe" "release/ffmpeg-$os.exe"
            elif [ -f "$d/ffmpeg" ]; then
              cp -f "$d/ffmpeg" "release/ffmpeg-$os"
            fi
            if [ -f "$d/ffprobe.exe" ]; then
              cp -f "$d/ffprobe.exe" "release/ffprobe-$os.exe"
            elif [ -f "$d/ffprobe" ]; then
              cp -f "$d/ffprobe" "release/ffprobe-$os"
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: build-${{ needs.resolve_ref.outputs.tag != '' && needs.resolve_ref.outputs.tag || needs.resolve_ref.outputs.ref }}-${{ needs.resolve_ref.outputs.date }}${{ github.event_name == 'push' && format('-%s', github.run_number) || '' }}
          name: FFmpeg ${{ needs.resolve_ref.outputs.tag != '' && needs.resolve_ref.outputs.tag || needs.resolve_ref.outputs.ref }} Build (${{ needs.resolve_ref.outputs.date }})
          body: |
            Automated monthly build of FFmpeg.

            **Upstream source:**
            - Repository: https://github.com/FFmpeg/FFmpeg
            - Ref: ${{ needs.resolve_ref.outputs.ref }}
            - Tag: ${{ needs.resolve_ref.outputs.tag }}
            - Build date: ${{ needs.resolve_ref.outputs.date }}

            **Licensing:**
            These are prebuilt binaries of FFmpeg, licensed under LGPL v2.1+ (built with built-in codecs only, no GPL or nonfree components).
            
            For full FFmpeg licensing information, see: https://ffmpeg.org/legal.html
            
            FFmpeg is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.

            **Build configuration:**
            - Linux: fully static (musl-based, no external dependencies)
            - macOS: static FFmpeg libraries (system frameworks remain dynamic)
            - Windows: static build with no runtime DLLs (MSYS2 toolchain)

          files: |
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
